
package ws.client;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.6-1b01 
 * Generated source version: 2.2
 * 
 */
@WebService(name = "CustomerWebService", targetNamespace = "http://ws.session.ejb/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface CustomerWebService {


    /**
     * 
     * @param password
     * @param customerId
     * @param email
     * @return
     *     returns ws.client.CustomerEntity
     * @throws InvalidLoginCredentialException_Exception
     * @throws CustomerNotFoundException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "retrieveCustomerEntityByCustomerId", targetNamespace = "http://ws.session.ejb/", className = "ws.client.RetrieveCustomerEntityByCustomerId")
    @ResponseWrapper(localName = "retrieveCustomerEntityByCustomerIdResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.RetrieveCustomerEntityByCustomerIdResponse")
    @Action(input = "http://ws.session.ejb/CustomerWebService/retrieveCustomerEntityByCustomerIdRequest", output = "http://ws.session.ejb/CustomerWebService/retrieveCustomerEntityByCustomerIdResponse", fault = {
        @FaultAction(className = CustomerNotFoundException_Exception.class, value = "http://ws.session.ejb/CustomerWebService/retrieveCustomerEntityByCustomerId/Fault/CustomerNotFoundException"),
        @FaultAction(className = InvalidLoginCredentialException_Exception.class, value = "http://ws.session.ejb/CustomerWebService/retrieveCustomerEntityByCustomerId/Fault/InvalidLoginCredentialException")
    })
    public CustomerEntity retrieveCustomerEntityByCustomerId(
        @WebParam(name = "email", targetNamespace = "")
        String email,
        @WebParam(name = "password", targetNamespace = "")
        String password,
        @WebParam(name = "customerId", targetNamespace = "")
        Long customerId)
        throws CustomerNotFoundException_Exception, InvalidLoginCredentialException_Exception
    ;

    /**
     * 
     * @param customerEntity
     * @return
     *     returns java.lang.Long
     * @throws CustomerNotUniqueException_Exception
     * @throws UnknownPersistenceException_Exception
     * @throws InputDataValidationException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createNewCustomer", targetNamespace = "http://ws.session.ejb/", className = "ws.client.CreateNewCustomer")
    @ResponseWrapper(localName = "createNewCustomerResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.CreateNewCustomerResponse")
    @Action(input = "http://ws.session.ejb/CustomerWebService/createNewCustomerRequest", output = "http://ws.session.ejb/CustomerWebService/createNewCustomerResponse", fault = {
        @FaultAction(className = CustomerNotUniqueException_Exception.class, value = "http://ws.session.ejb/CustomerWebService/createNewCustomer/Fault/CustomerNotUniqueException"),
        @FaultAction(className = UnknownPersistenceException_Exception.class, value = "http://ws.session.ejb/CustomerWebService/createNewCustomer/Fault/UnknownPersistenceException"),
        @FaultAction(className = InputDataValidationException_Exception.class, value = "http://ws.session.ejb/CustomerWebService/createNewCustomer/Fault/InputDataValidationException")
    })
    public Long createNewCustomer(
        @WebParam(name = "customerEntity", targetNamespace = "")
        CustomerEntity customerEntity)
        throws CustomerNotUniqueException_Exception, InputDataValidationException_Exception, UnknownPersistenceException_Exception
    ;

    /**
     * 
     * @param password
     * @param emailAddress
     * @param email
     * @return
     *     returns ws.client.CustomerEntity
     * @throws InvalidLoginCredentialException_Exception
     * @throws CustomerNotFoundException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "retrieveCustomerByEmail", targetNamespace = "http://ws.session.ejb/", className = "ws.client.RetrieveCustomerByEmail")
    @ResponseWrapper(localName = "retrieveCustomerByEmailResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.RetrieveCustomerByEmailResponse")
    @Action(input = "http://ws.session.ejb/CustomerWebService/retrieveCustomerByEmailRequest", output = "http://ws.session.ejb/CustomerWebService/retrieveCustomerByEmailResponse", fault = {
        @FaultAction(className = CustomerNotFoundException_Exception.class, value = "http://ws.session.ejb/CustomerWebService/retrieveCustomerByEmail/Fault/CustomerNotFoundException"),
        @FaultAction(className = InvalidLoginCredentialException_Exception.class, value = "http://ws.session.ejb/CustomerWebService/retrieveCustomerByEmail/Fault/InvalidLoginCredentialException")
    })
    public CustomerEntity retrieveCustomerByEmail(
        @WebParam(name = "email", targetNamespace = "")
        String email,
        @WebParam(name = "password", targetNamespace = "")
        String password,
        @WebParam(name = "emailAddress", targetNamespace = "")
        String emailAddress)
        throws CustomerNotFoundException_Exception, InvalidLoginCredentialException_Exception
    ;

    /**
     * 
     * @param password
     * @param email
     * @return
     *     returns java.util.List<ws.client.CustomerEntity>
     * @throws InvalidLoginCredentialException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "retrieveAllCustomers", targetNamespace = "http://ws.session.ejb/", className = "ws.client.RetrieveAllCustomers")
    @ResponseWrapper(localName = "retrieveAllCustomersResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.RetrieveAllCustomersResponse")
    @Action(input = "http://ws.session.ejb/CustomerWebService/retrieveAllCustomersRequest", output = "http://ws.session.ejb/CustomerWebService/retrieveAllCustomersResponse", fault = {
        @FaultAction(className = InvalidLoginCredentialException_Exception.class, value = "http://ws.session.ejb/CustomerWebService/retrieveAllCustomers/Fault/InvalidLoginCredentialException")
    })
    public List<CustomerEntity> retrieveAllCustomers(
        @WebParam(name = "email", targetNamespace = "")
        String email,
        @WebParam(name = "password", targetNamespace = "")
        String password)
        throws InvalidLoginCredentialException_Exception
    ;

    /**
     * 
     * @param loginEmail
     * @param password
     * @param loginPassword
     * @param email
     * @return
     *     returns ws.client.CustomerEntity
     * @throws InvalidLoginCredentialException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "customerLogin", targetNamespace = "http://ws.session.ejb/", className = "ws.client.CustomerLogin")
    @ResponseWrapper(localName = "customerLoginResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.CustomerLoginResponse")
    @Action(input = "http://ws.session.ejb/CustomerWebService/customerLoginRequest", output = "http://ws.session.ejb/CustomerWebService/customerLoginResponse", fault = {
        @FaultAction(className = InvalidLoginCredentialException_Exception.class, value = "http://ws.session.ejb/CustomerWebService/customerLogin/Fault/InvalidLoginCredentialException")
    })
    public CustomerEntity customerLogin(
        @WebParam(name = "email", targetNamespace = "")
        String email,
        @WebParam(name = "password", targetNamespace = "")
        String password,
        @WebParam(name = "loginEmail", targetNamespace = "")
        String loginEmail,
        @WebParam(name = "loginPassword", targetNamespace = "")
        String loginPassword)
        throws InvalidLoginCredentialException_Exception
    ;

    /**
     * 
     * @param customerEntity
     * @param password
     * @param email
     * @throws InvalidLoginCredentialException_Exception
     * @throws UpdateCustomerException_Exception
     * @throws InputDataValidationException_Exception
     * @throws CustomerNotFoundException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "updateCustomer", targetNamespace = "http://ws.session.ejb/", className = "ws.client.UpdateCustomer")
    @ResponseWrapper(localName = "updateCustomerResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.UpdateCustomerResponse")
    @Action(input = "http://ws.session.ejb/CustomerWebService/updateCustomerRequest", output = "http://ws.session.ejb/CustomerWebService/updateCustomerResponse", fault = {
        @FaultAction(className = CustomerNotFoundException_Exception.class, value = "http://ws.session.ejb/CustomerWebService/updateCustomer/Fault/CustomerNotFoundException"),
        @FaultAction(className = InputDataValidationException_Exception.class, value = "http://ws.session.ejb/CustomerWebService/updateCustomer/Fault/InputDataValidationException"),
        @FaultAction(className = UpdateCustomerException_Exception.class, value = "http://ws.session.ejb/CustomerWebService/updateCustomer/Fault/UpdateCustomerException"),
        @FaultAction(className = InvalidLoginCredentialException_Exception.class, value = "http://ws.session.ejb/CustomerWebService/updateCustomer/Fault/InvalidLoginCredentialException")
    })
    public void updateCustomer(
        @WebParam(name = "email", targetNamespace = "")
        String email,
        @WebParam(name = "password", targetNamespace = "")
        String password,
        @WebParam(name = "customerEntity", targetNamespace = "")
        CustomerEntity customerEntity)
        throws CustomerNotFoundException_Exception, InputDataValidationException_Exception, InvalidLoginCredentialException_Exception, UpdateCustomerException_Exception
    ;

    /**
     * 
     * @param password
     * @param customerId
     * @param email
     * @throws InvalidLoginCredentialException_Exception
     * @throws CustomerDeletionException_Exception
     * @throws CustomerNotFoundException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "deleteCustomer", targetNamespace = "http://ws.session.ejb/", className = "ws.client.DeleteCustomer")
    @ResponseWrapper(localName = "deleteCustomerResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.DeleteCustomerResponse")
    @Action(input = "http://ws.session.ejb/CustomerWebService/deleteCustomerRequest", output = "http://ws.session.ejb/CustomerWebService/deleteCustomerResponse", fault = {
        @FaultAction(className = CustomerDeletionException_Exception.class, value = "http://ws.session.ejb/CustomerWebService/deleteCustomer/Fault/CustomerDeletionException"),
        @FaultAction(className = CustomerNotFoundException_Exception.class, value = "http://ws.session.ejb/CustomerWebService/deleteCustomer/Fault/CustomerNotFoundException"),
        @FaultAction(className = InvalidLoginCredentialException_Exception.class, value = "http://ws.session.ejb/CustomerWebService/deleteCustomer/Fault/InvalidLoginCredentialException")
    })
    public void deleteCustomer(
        @WebParam(name = "email", targetNamespace = "")
        String email,
        @WebParam(name = "password", targetNamespace = "")
        String password,
        @WebParam(name = "customerId", targetNamespace = "")
        Long customerId)
        throws CustomerDeletionException_Exception, CustomerNotFoundException_Exception, InvalidLoginCredentialException_Exception
    ;

}
