
package ws.client;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.6-1b01 
 * Generated source version: 2.2
 * 
 */
@WebService(name = "AppointmentEntityWebService", targetNamespace = "http://ws.session.ejb/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface AppointmentEntityWebService {


    /**
     * 
     * @param password
     * @param serviceProviderId
     * @param customerId
     * @param email
     * @param newAppointmentEntity
     * @return
     *     returns java.lang.Long
     * @throws InvalidLoginCredentialException_Exception
     * @throws ServiceProviderNotFoundException_Exception
     * @throws InputDataValidationException_Exception
     * @throws CustomerNotFoundException_Exception
     * @throws UnknownPersistenceException_Exception
     * @throws ServiceProviderBlockedException_Exception
     * @throws AppointmentNumberExistsException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createNewAppointment", targetNamespace = "http://ws.session.ejb/", className = "ws.client.CreateNewAppointment")
    @ResponseWrapper(localName = "createNewAppointmentResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.CreateNewAppointmentResponse")
    @Action(input = "http://ws.session.ejb/AppointmentEntityWebService/createNewAppointmentRequest", output = "http://ws.session.ejb/AppointmentEntityWebService/createNewAppointmentResponse", fault = {
        @FaultAction(className = UnknownPersistenceException_Exception.class, value = "http://ws.session.ejb/AppointmentEntityWebService/createNewAppointment/Fault/UnknownPersistenceException"),
        @FaultAction(className = InputDataValidationException_Exception.class, value = "http://ws.session.ejb/AppointmentEntityWebService/createNewAppointment/Fault/InputDataValidationException"),
        @FaultAction(className = AppointmentNumberExistsException_Exception.class, value = "http://ws.session.ejb/AppointmentEntityWebService/createNewAppointment/Fault/AppointmentNumberExistsException"),
        @FaultAction(className = CustomerNotFoundException_Exception.class, value = "http://ws.session.ejb/AppointmentEntityWebService/createNewAppointment/Fault/CustomerNotFoundException"),
        @FaultAction(className = ServiceProviderNotFoundException_Exception.class, value = "http://ws.session.ejb/AppointmentEntityWebService/createNewAppointment/Fault/ServiceProviderNotFoundException"),
        @FaultAction(className = ServiceProviderBlockedException_Exception.class, value = "http://ws.session.ejb/AppointmentEntityWebService/createNewAppointment/Fault/ServiceProviderBlockedException"),
        @FaultAction(className = InvalidLoginCredentialException_Exception.class, value = "http://ws.session.ejb/AppointmentEntityWebService/createNewAppointment/Fault/InvalidLoginCredentialException")
    })
    public Long createNewAppointment(
        @WebParam(name = "email", targetNamespace = "")
        String email,
        @WebParam(name = "password", targetNamespace = "")
        String password,
        @WebParam(name = "customerId", targetNamespace = "")
        Long customerId,
        @WebParam(name = "serviceProviderId", targetNamespace = "")
        Long serviceProviderId,
        @WebParam(name = "newAppointmentEntity", targetNamespace = "")
        AppointmentEntity newAppointmentEntity)
        throws AppointmentNumberExistsException_Exception, CustomerNotFoundException_Exception, InputDataValidationException_Exception, InvalidLoginCredentialException_Exception, ServiceProviderBlockedException_Exception, ServiceProviderNotFoundException_Exception, UnknownPersistenceException_Exception
    ;

    /**
     * 
     * @param password
     * @param appointmentId
     * @param email
     * @return
     *     returns ws.client.AppointmentEntity
     * @throws InvalidLoginCredentialException_Exception
     * @throws AppointmentNotFoundException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "retrieveAppointmentByAppointmentId", targetNamespace = "http://ws.session.ejb/", className = "ws.client.RetrieveAppointmentByAppointmentId")
    @ResponseWrapper(localName = "retrieveAppointmentByAppointmentIdResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.RetrieveAppointmentByAppointmentIdResponse")
    @Action(input = "http://ws.session.ejb/AppointmentEntityWebService/retrieveAppointmentByAppointmentIdRequest", output = "http://ws.session.ejb/AppointmentEntityWebService/retrieveAppointmentByAppointmentIdResponse", fault = {
        @FaultAction(className = AppointmentNotFoundException_Exception.class, value = "http://ws.session.ejb/AppointmentEntityWebService/retrieveAppointmentByAppointmentId/Fault/AppointmentNotFoundException"),
        @FaultAction(className = InvalidLoginCredentialException_Exception.class, value = "http://ws.session.ejb/AppointmentEntityWebService/retrieveAppointmentByAppointmentId/Fault/InvalidLoginCredentialException")
    })
    public AppointmentEntity retrieveAppointmentByAppointmentId(
        @WebParam(name = "email", targetNamespace = "")
        String email,
        @WebParam(name = "password", targetNamespace = "")
        String password,
        @WebParam(name = "appointmentId", targetNamespace = "")
        Long appointmentId)
        throws AppointmentNotFoundException_Exception, InvalidLoginCredentialException_Exception
    ;

    /**
     * 
     * @param password
     * @param appointmentNumber
     * @param email
     * @return
     *     returns ws.client.AppointmentEntity
     * @throws InvalidLoginCredentialException_Exception
     * @throws AppointmentNotFoundException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "retrieveAppointmentByAppointmentNumber", targetNamespace = "http://ws.session.ejb/", className = "ws.client.RetrieveAppointmentByAppointmentNumber")
    @ResponseWrapper(localName = "retrieveAppointmentByAppointmentNumberResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.RetrieveAppointmentByAppointmentNumberResponse")
    @Action(input = "http://ws.session.ejb/AppointmentEntityWebService/retrieveAppointmentByAppointmentNumberRequest", output = "http://ws.session.ejb/AppointmentEntityWebService/retrieveAppointmentByAppointmentNumberResponse", fault = {
        @FaultAction(className = AppointmentNotFoundException_Exception.class, value = "http://ws.session.ejb/AppointmentEntityWebService/retrieveAppointmentByAppointmentNumber/Fault/AppointmentNotFoundException"),
        @FaultAction(className = InvalidLoginCredentialException_Exception.class, value = "http://ws.session.ejb/AppointmentEntityWebService/retrieveAppointmentByAppointmentNumber/Fault/InvalidLoginCredentialException")
    })
    public AppointmentEntity retrieveAppointmentByAppointmentNumber(
        @WebParam(name = "email", targetNamespace = "")
        String email,
        @WebParam(name = "password", targetNamespace = "")
        String password,
        @WebParam(name = "appointmentNumber", targetNamespace = "")
        String appointmentNumber)
        throws AppointmentNotFoundException_Exception, InvalidLoginCredentialException_Exception
    ;

    /**
     * 
     * @param date
     * @param password
     * @param serviceProviderName
     * @param email
     * @return
     *     returns java.util.List<ws.client.AppointmentEntity>
     * @throws InvalidLoginCredentialException_Exception
     * @throws AppointmentNotFoundException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "retrieveAppointmentsByDate", targetNamespace = "http://ws.session.ejb/", className = "ws.client.RetrieveAppointmentsByDate")
    @ResponseWrapper(localName = "retrieveAppointmentsByDateResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.RetrieveAppointmentsByDateResponse")
    @Action(input = "http://ws.session.ejb/AppointmentEntityWebService/retrieveAppointmentsByDateRequest", output = "http://ws.session.ejb/AppointmentEntityWebService/retrieveAppointmentsByDateResponse", fault = {
        @FaultAction(className = InvalidLoginCredentialException_Exception.class, value = "http://ws.session.ejb/AppointmentEntityWebService/retrieveAppointmentsByDate/Fault/InvalidLoginCredentialException"),
        @FaultAction(className = AppointmentNotFoundException_Exception.class, value = "http://ws.session.ejb/AppointmentEntityWebService/retrieveAppointmentsByDate/Fault/AppointmentNotFoundException")
    })
    public List<AppointmentEntity> retrieveAppointmentsByDate(
        @WebParam(name = "email", targetNamespace = "")
        String email,
        @WebParam(name = "password", targetNamespace = "")
        String password,
        @WebParam(name = "date", targetNamespace = "")
        String date,
        @WebParam(name = "serviceProviderName", targetNamespace = "")
        String serviceProviderName)
        throws AppointmentNotFoundException_Exception, InvalidLoginCredentialException_Exception
    ;

    /**
     * 
     * @param date
     * @param password
     * @param serviceProviderId
     * @param email
     * @return
     *     returns java.util.List<ws.client.AppointmentEntity>
     * @throws InvalidLoginCredentialException_Exception
     * @throws AppointmentNotFoundException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "retrieveSortedAppointmentsByDate", targetNamespace = "http://ws.session.ejb/", className = "ws.client.RetrieveSortedAppointmentsByDate")
    @ResponseWrapper(localName = "retrieveSortedAppointmentsByDateResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.RetrieveSortedAppointmentsByDateResponse")
    @Action(input = "http://ws.session.ejb/AppointmentEntityWebService/retrieveSortedAppointmentsByDateRequest", output = "http://ws.session.ejb/AppointmentEntityWebService/retrieveSortedAppointmentsByDateResponse", fault = {
        @FaultAction(className = InvalidLoginCredentialException_Exception.class, value = "http://ws.session.ejb/AppointmentEntityWebService/retrieveSortedAppointmentsByDate/Fault/InvalidLoginCredentialException"),
        @FaultAction(className = AppointmentNotFoundException_Exception.class, value = "http://ws.session.ejb/AppointmentEntityWebService/retrieveSortedAppointmentsByDate/Fault/AppointmentNotFoundException")
    })
    public List<AppointmentEntity> retrieveSortedAppointmentsByDate(
        @WebParam(name = "email", targetNamespace = "")
        String email,
        @WebParam(name = "password", targetNamespace = "")
        String password,
        @WebParam(name = "date", targetNamespace = "")
        String date,
        @WebParam(name = "serviceProviderId", targetNamespace = "")
        Long serviceProviderId)
        throws AppointmentNotFoundException_Exception, InvalidLoginCredentialException_Exception
    ;

    /**
     * 
     * @param password
     * @param appointmentNumber
     * @param email
     * @throws InvalidLoginCredentialException_Exception
     * @throws AppointmentNotFoundException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "deleteAppointment", targetNamespace = "http://ws.session.ejb/", className = "ws.client.DeleteAppointment")
    @ResponseWrapper(localName = "deleteAppointmentResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.DeleteAppointmentResponse")
    @Action(input = "http://ws.session.ejb/AppointmentEntityWebService/deleteAppointmentRequest", output = "http://ws.session.ejb/AppointmentEntityWebService/deleteAppointmentResponse", fault = {
        @FaultAction(className = AppointmentNotFoundException_Exception.class, value = "http://ws.session.ejb/AppointmentEntityWebService/deleteAppointment/Fault/AppointmentNotFoundException"),
        @FaultAction(className = InvalidLoginCredentialException_Exception.class, value = "http://ws.session.ejb/AppointmentEntityWebService/deleteAppointment/Fault/InvalidLoginCredentialException")
    })
    public void deleteAppointment(
        @WebParam(name = "email", targetNamespace = "")
        String email,
        @WebParam(name = "password", targetNamespace = "")
        String password,
        @WebParam(name = "appointmentNumber", targetNamespace = "")
        String appointmentNumber)
        throws AppointmentNotFoundException_Exception, InvalidLoginCredentialException_Exception
    ;

    /**
     * 
     * @param password
     * @param appointmentEntity
     * @param email
     * @throws InvalidLoginCredentialException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "updateAppointmentEntity", targetNamespace = "http://ws.session.ejb/", className = "ws.client.UpdateAppointmentEntity")
    @ResponseWrapper(localName = "updateAppointmentEntityResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.UpdateAppointmentEntityResponse")
    @Action(input = "http://ws.session.ejb/AppointmentEntityWebService/updateAppointmentEntityRequest", output = "http://ws.session.ejb/AppointmentEntityWebService/updateAppointmentEntityResponse", fault = {
        @FaultAction(className = InvalidLoginCredentialException_Exception.class, value = "http://ws.session.ejb/AppointmentEntityWebService/updateAppointmentEntity/Fault/InvalidLoginCredentialException")
    })
    public void updateAppointmentEntity(
        @WebParam(name = "email", targetNamespace = "")
        String email,
        @WebParam(name = "password", targetNamespace = "")
        String password,
        @WebParam(name = "appointmentEntity", targetNamespace = "")
        AppointmentEntity appointmentEntity)
        throws InvalidLoginCredentialException_Exception
    ;

    /**
     * 
     * @param password
     * @param serviceProviderId
     * @param customerId
     * @param email
     * @return
     *     returns java.util.List<ws.client.AppointmentEntity>
     * @throws InvalidLoginCredentialException_Exception
     * @throws AppointmentNotFoundException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "retrieveAppointmentByCustomer", targetNamespace = "http://ws.session.ejb/", className = "ws.client.RetrieveAppointmentByCustomer")
    @ResponseWrapper(localName = "retrieveAppointmentByCustomerResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.RetrieveAppointmentByCustomerResponse")
    @Action(input = "http://ws.session.ejb/AppointmentEntityWebService/retrieveAppointmentByCustomerRequest", output = "http://ws.session.ejb/AppointmentEntityWebService/retrieveAppointmentByCustomerResponse", fault = {
        @FaultAction(className = InvalidLoginCredentialException_Exception.class, value = "http://ws.session.ejb/AppointmentEntityWebService/retrieveAppointmentByCustomer/Fault/InvalidLoginCredentialException"),
        @FaultAction(className = AppointmentNotFoundException_Exception.class, value = "http://ws.session.ejb/AppointmentEntityWebService/retrieveAppointmentByCustomer/Fault/AppointmentNotFoundException")
    })
    public List<AppointmentEntity> retrieveAppointmentByCustomer(
        @WebParam(name = "email", targetNamespace = "")
        String email,
        @WebParam(name = "password", targetNamespace = "")
        String password,
        @WebParam(name = "customerId", targetNamespace = "")
        Long customerId,
        @WebParam(name = "serviceProviderId", targetNamespace = "")
        Long serviceProviderId)
        throws AppointmentNotFoundException_Exception, InvalidLoginCredentialException_Exception
    ;

    /**
     * 
     * @param password
     * @param serviceProviderId
     * @param email
     * @return
     *     returns java.util.List<ws.client.AppointmentEntity>
     * @throws InvalidLoginCredentialException_Exception
     * @throws AppointmentNotFoundException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "retrieveAppointmentsByServiceProviderId", targetNamespace = "http://ws.session.ejb/", className = "ws.client.RetrieveAppointmentsByServiceProviderId")
    @ResponseWrapper(localName = "retrieveAppointmentsByServiceProviderIdResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.RetrieveAppointmentsByServiceProviderIdResponse")
    @Action(input = "http://ws.session.ejb/AppointmentEntityWebService/retrieveAppointmentsByServiceProviderIdRequest", output = "http://ws.session.ejb/AppointmentEntityWebService/retrieveAppointmentsByServiceProviderIdResponse", fault = {
        @FaultAction(className = InvalidLoginCredentialException_Exception.class, value = "http://ws.session.ejb/AppointmentEntityWebService/retrieveAppointmentsByServiceProviderId/Fault/InvalidLoginCredentialException"),
        @FaultAction(className = AppointmentNotFoundException_Exception.class, value = "http://ws.session.ejb/AppointmentEntityWebService/retrieveAppointmentsByServiceProviderId/Fault/AppointmentNotFoundException")
    })
    public List<AppointmentEntity> retrieveAppointmentsByServiceProviderId(
        @WebParam(name = "email", targetNamespace = "")
        String email,
        @WebParam(name = "password", targetNamespace = "")
        String password,
        @WebParam(name = "serviceProviderId", targetNamespace = "")
        Long serviceProviderId)
        throws AppointmentNotFoundException_Exception, InvalidLoginCredentialException_Exception
    ;

    /**
     * 
     * @param password
     * @param appointmentId
     * @param email
     * @throws InvalidLoginCredentialException_Exception
     * @throws AppointmentNotFoundException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "updateAppointmentEntityRating", targetNamespace = "http://ws.session.ejb/", className = "ws.client.UpdateAppointmentEntityRating")
    @ResponseWrapper(localName = "updateAppointmentEntityRatingResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.UpdateAppointmentEntityRatingResponse")
    @Action(input = "http://ws.session.ejb/AppointmentEntityWebService/updateAppointmentEntityRatingRequest", output = "http://ws.session.ejb/AppointmentEntityWebService/updateAppointmentEntityRatingResponse", fault = {
        @FaultAction(className = InvalidLoginCredentialException_Exception.class, value = "http://ws.session.ejb/AppointmentEntityWebService/updateAppointmentEntityRating/Fault/InvalidLoginCredentialException"),
        @FaultAction(className = AppointmentNotFoundException_Exception.class, value = "http://ws.session.ejb/AppointmentEntityWebService/updateAppointmentEntityRating/Fault/AppointmentNotFoundException")
    })
    public void updateAppointmentEntityRating(
        @WebParam(name = "email", targetNamespace = "")
        String email,
        @WebParam(name = "password", targetNamespace = "")
        String password,
        @WebParam(name = "appointmentId", targetNamespace = "")
        Long appointmentId)
        throws AppointmentNotFoundException_Exception, InvalidLoginCredentialException_Exception
    ;

    /**
     * 
     * @param date
     * @param password
     * @param email
     * @return
     *     returns ws.client.LocalDate
     * @throws InvalidLoginCredentialException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "convertDate", targetNamespace = "http://ws.session.ejb/", className = "ws.client.ConvertDate")
    @ResponseWrapper(localName = "convertDateResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.ConvertDateResponse")
    @Action(input = "http://ws.session.ejb/AppointmentEntityWebService/convertDateRequest", output = "http://ws.session.ejb/AppointmentEntityWebService/convertDateResponse", fault = {
        @FaultAction(className = InvalidLoginCredentialException_Exception.class, value = "http://ws.session.ejb/AppointmentEntityWebService/convertDate/Fault/InvalidLoginCredentialException")
    })
    public LocalDate convertDate(
        @WebParam(name = "email", targetNamespace = "")
        String email,
        @WebParam(name = "password", targetNamespace = "")
        String password,
        @WebParam(name = "date", targetNamespace = "")
        String date)
        throws InvalidLoginCredentialException_Exception
    ;

    /**
     * 
     * @param password
     * @param appointmentNo
     * @param email
     * @return
     *     returns boolean
     * @throws InvalidLoginCredentialException_Exception
     * @throws InputInvalidValuesException_Exception
     * @throws AppointmentNotFoundException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "ifAppointmentCanCancel", targetNamespace = "http://ws.session.ejb/", className = "ws.client.IfAppointmentCanCancel")
    @ResponseWrapper(localName = "ifAppointmentCanCancelResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.IfAppointmentCanCancelResponse")
    @Action(input = "http://ws.session.ejb/AppointmentEntityWebService/ifAppointmentCanCancelRequest", output = "http://ws.session.ejb/AppointmentEntityWebService/ifAppointmentCanCancelResponse", fault = {
        @FaultAction(className = InputInvalidValuesException_Exception.class, value = "http://ws.session.ejb/AppointmentEntityWebService/ifAppointmentCanCancel/Fault/InputInvalidValuesException"),
        @FaultAction(className = InvalidLoginCredentialException_Exception.class, value = "http://ws.session.ejb/AppointmentEntityWebService/ifAppointmentCanCancel/Fault/InvalidLoginCredentialException"),
        @FaultAction(className = AppointmentNotFoundException_Exception.class, value = "http://ws.session.ejb/AppointmentEntityWebService/ifAppointmentCanCancel/Fault/AppointmentNotFoundException")
    })
    public boolean ifAppointmentCanCancel(
        @WebParam(name = "email", targetNamespace = "")
        String email,
        @WebParam(name = "password", targetNamespace = "")
        String password,
        @WebParam(name = "appointmentNo", targetNamespace = "")
        String appointmentNo)
        throws AppointmentNotFoundException_Exception, InputInvalidValuesException_Exception, InvalidLoginCredentialException_Exception
    ;

    /**
     * 
     * @param date
     * @param password
     * @param email
     * @return
     *     returns java.lang.String
     * @throws InvalidLoginCredentialException_Exception
     * @throws InputInvalidValuesException_Exception
     * @throws AppointmentNotFoundException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "calculateDayOfTheWeek", targetNamespace = "http://ws.session.ejb/", className = "ws.client.CalculateDayOfTheWeek")
    @ResponseWrapper(localName = "calculateDayOfTheWeekResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.CalculateDayOfTheWeekResponse")
    @Action(input = "http://ws.session.ejb/AppointmentEntityWebService/calculateDayOfTheWeekRequest", output = "http://ws.session.ejb/AppointmentEntityWebService/calculateDayOfTheWeekResponse", fault = {
        @FaultAction(className = InvalidLoginCredentialException_Exception.class, value = "http://ws.session.ejb/AppointmentEntityWebService/calculateDayOfTheWeek/Fault/InvalidLoginCredentialException"),
        @FaultAction(className = AppointmentNotFoundException_Exception.class, value = "http://ws.session.ejb/AppointmentEntityWebService/calculateDayOfTheWeek/Fault/AppointmentNotFoundException"),
        @FaultAction(className = InputInvalidValuesException_Exception.class, value = "http://ws.session.ejb/AppointmentEntityWebService/calculateDayOfTheWeek/Fault/InputInvalidValuesException")
    })
    public String calculateDayOfTheWeek(
        @WebParam(name = "email", targetNamespace = "")
        String email,
        @WebParam(name = "password", targetNamespace = "")
        String password,
        @WebParam(name = "date", targetNamespace = "")
        String date)
        throws AppointmentNotFoundException_Exception, InputInvalidValuesException_Exception, InvalidLoginCredentialException_Exception
    ;

    /**
     * 
     * @param password
     * @param appointmentTime
     * @param email
     * @return
     *     returns ws.client.LocalTime
     * @throws InvalidLoginCredentialException_Exception
     * @throws InputInvalidValuesException_Exception
     * @throws AppointmentNotFoundException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "convertTime", targetNamespace = "http://ws.session.ejb/", className = "ws.client.ConvertTime")
    @ResponseWrapper(localName = "convertTimeResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.ConvertTimeResponse")
    @Action(input = "http://ws.session.ejb/AppointmentEntityWebService/convertTimeRequest", output = "http://ws.session.ejb/AppointmentEntityWebService/convertTimeResponse", fault = {
        @FaultAction(className = InputInvalidValuesException_Exception.class, value = "http://ws.session.ejb/AppointmentEntityWebService/convertTime/Fault/InputInvalidValuesException"),
        @FaultAction(className = InvalidLoginCredentialException_Exception.class, value = "http://ws.session.ejb/AppointmentEntityWebService/convertTime/Fault/InvalidLoginCredentialException"),
        @FaultAction(className = AppointmentNotFoundException_Exception.class, value = "http://ws.session.ejb/AppointmentEntityWebService/convertTime/Fault/AppointmentNotFoundException")
    })
    public LocalTime convertTime(
        @WebParam(name = "email", targetNamespace = "")
        String email,
        @WebParam(name = "password", targetNamespace = "")
        String password,
        @WebParam(name = "appointmentTime", targetNamespace = "")
        String appointmentTime)
        throws AppointmentNotFoundException_Exception, InputInvalidValuesException_Exception, InvalidLoginCredentialException_Exception
    ;

    /**
     * 
     * @param date
     * @param password
     * @param time
     * @param email
     * @return
     *     returns boolean
     * @throws InvalidLoginCredentialException_Exception
     * @throws InputInvalidValuesException_Exception
     * @throws AppointmentNotFoundException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "ifAppointmentCanAdd", targetNamespace = "http://ws.session.ejb/", className = "ws.client.IfAppointmentCanAdd")
    @ResponseWrapper(localName = "ifAppointmentCanAddResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.IfAppointmentCanAddResponse")
    @Action(input = "http://ws.session.ejb/AppointmentEntityWebService/ifAppointmentCanAddRequest", output = "http://ws.session.ejb/AppointmentEntityWebService/ifAppointmentCanAddResponse", fault = {
        @FaultAction(className = InvalidLoginCredentialException_Exception.class, value = "http://ws.session.ejb/AppointmentEntityWebService/ifAppointmentCanAdd/Fault/InvalidLoginCredentialException"),
        @FaultAction(className = AppointmentNotFoundException_Exception.class, value = "http://ws.session.ejb/AppointmentEntityWebService/ifAppointmentCanAdd/Fault/AppointmentNotFoundException"),
        @FaultAction(className = InputInvalidValuesException_Exception.class, value = "http://ws.session.ejb/AppointmentEntityWebService/ifAppointmentCanAdd/Fault/InputInvalidValuesException")
    })
    public boolean ifAppointmentCanAdd(
        @WebParam(name = "email", targetNamespace = "")
        String email,
        @WebParam(name = "password", targetNamespace = "")
        String password,
        @WebParam(name = "date", targetNamespace = "")
        String date,
        @WebParam(name = "time", targetNamespace = "")
        String time)
        throws AppointmentNotFoundException_Exception, InputInvalidValuesException_Exception, InvalidLoginCredentialException_Exception
    ;

    /**
     * 
     * @param apptList
     * @param password
     * @param serviceProviderId
     * @param email
     * @return
     *     returns java.lang.Long
     * @throws InvalidLoginCredentialException_Exception
     * @throws AppointmentNotFoundException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "ifCanRate", targetNamespace = "http://ws.session.ejb/", className = "ws.client.IfCanRate")
    @ResponseWrapper(localName = "ifCanRateResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.IfCanRateResponse")
    @Action(input = "http://ws.session.ejb/AppointmentEntityWebService/ifCanRateRequest", output = "http://ws.session.ejb/AppointmentEntityWebService/ifCanRateResponse", fault = {
        @FaultAction(className = InvalidLoginCredentialException_Exception.class, value = "http://ws.session.ejb/AppointmentEntityWebService/ifCanRate/Fault/InvalidLoginCredentialException"),
        @FaultAction(className = AppointmentNotFoundException_Exception.class, value = "http://ws.session.ejb/AppointmentEntityWebService/ifCanRate/Fault/AppointmentNotFoundException")
    })
    public Long ifCanRate(
        @WebParam(name = "email", targetNamespace = "")
        String email,
        @WebParam(name = "password", targetNamespace = "")
        String password,
        @WebParam(name = "apptList", targetNamespace = "")
        List<AppointmentEntity> apptList,
        @WebParam(name = "serviceProviderId", targetNamespace = "")
        Long serviceProviderId)
        throws AppointmentNotFoundException_Exception, InvalidLoginCredentialException_Exception
    ;

    /**
     * 
     * @param password
     * @param time
     * @param email
     * @return
     *     returns java.lang.String
     * @throws InvalidLoginCredentialException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getLocalTimeInString", targetNamespace = "http://ws.session.ejb/", className = "ws.client.GetLocalTimeInString")
    @ResponseWrapper(localName = "getLocalTimeInStringResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.GetLocalTimeInStringResponse")
    @Action(input = "http://ws.session.ejb/AppointmentEntityWebService/getLocalTimeInStringRequest", output = "http://ws.session.ejb/AppointmentEntityWebService/getLocalTimeInStringResponse", fault = {
        @FaultAction(className = InvalidLoginCredentialException_Exception.class, value = "http://ws.session.ejb/AppointmentEntityWebService/getLocalTimeInString/Fault/InvalidLoginCredentialException")
    })
    public String getLocalTimeInString(
        @WebParam(name = "email", targetNamespace = "")
        String email,
        @WebParam(name = "password", targetNamespace = "")
        String password,
        @WebParam(name = "time", targetNamespace = "")
        LocalTime time)
        throws InvalidLoginCredentialException_Exception
    ;

    /**
     * 
     * @param password
     * @param appointmentList
     * @param timeSlots
     * @param email
     * @return
     *     returns java.lang.String
     * @throws InvalidLoginCredentialException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "findFirstAvailableTime", targetNamespace = "http://ws.session.ejb/", className = "ws.client.FindFirstAvailableTime")
    @ResponseWrapper(localName = "findFirstAvailableTimeResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.FindFirstAvailableTimeResponse")
    @Action(input = "http://ws.session.ejb/AppointmentEntityWebService/findFirstAvailableTimeRequest", output = "http://ws.session.ejb/AppointmentEntityWebService/findFirstAvailableTimeResponse", fault = {
        @FaultAction(className = InvalidLoginCredentialException_Exception.class, value = "http://ws.session.ejb/AppointmentEntityWebService/findFirstAvailableTime/Fault/InvalidLoginCredentialException")
    })
    public String findFirstAvailableTime(
        @WebParam(name = "email", targetNamespace = "")
        String email,
        @WebParam(name = "password", targetNamespace = "")
        String password,
        @WebParam(name = "appointmentList", targetNamespace = "")
        List<AppointmentEntity> appointmentList,
        @WebParam(name = "timeSlots", targetNamespace = "")
        List<String> timeSlots)
        throws InvalidLoginCredentialException_Exception
    ;

    /**
     * 
     * @param password
     * @param appointmentList
     * @param timeSlots
     * @param email
     * @return
     *     returns java.util.List<java.lang.String>
     * @throws InvalidLoginCredentialException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "findAvailableTimeSlot", targetNamespace = "http://ws.session.ejb/", className = "ws.client.FindAvailableTimeSlot")
    @ResponseWrapper(localName = "findAvailableTimeSlotResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.FindAvailableTimeSlotResponse")
    @Action(input = "http://ws.session.ejb/AppointmentEntityWebService/findAvailableTimeSlotRequest", output = "http://ws.session.ejb/AppointmentEntityWebService/findAvailableTimeSlotResponse", fault = {
        @FaultAction(className = InvalidLoginCredentialException_Exception.class, value = "http://ws.session.ejb/AppointmentEntityWebService/findAvailableTimeSlot/Fault/InvalidLoginCredentialException")
    })
    public List<String> findAvailableTimeSlot(
        @WebParam(name = "email", targetNamespace = "")
        String email,
        @WebParam(name = "password", targetNamespace = "")
        String password,
        @WebParam(name = "appointmentList", targetNamespace = "")
        List<AppointmentEntity> appointmentList,
        @WebParam(name = "timeSlots", targetNamespace = "")
        List<String> timeSlots)
        throws InvalidLoginCredentialException_Exception
    ;

    /**
     * 
     * @param date
     * @param password
     * @param email
     * @return
     *     returns boolean
     * @throws InvalidLoginCredentialException_Exception
     * @throws InputInvalidValuesException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "ifDateHasNotPassed", targetNamespace = "http://ws.session.ejb/", className = "ws.client.IfDateHasNotPassed")
    @ResponseWrapper(localName = "ifDateHasNotPassedResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.IfDateHasNotPassedResponse")
    @Action(input = "http://ws.session.ejb/AppointmentEntityWebService/ifDateHasNotPassedRequest", output = "http://ws.session.ejb/AppointmentEntityWebService/ifDateHasNotPassedResponse", fault = {
        @FaultAction(className = InvalidLoginCredentialException_Exception.class, value = "http://ws.session.ejb/AppointmentEntityWebService/ifDateHasNotPassed/Fault/InvalidLoginCredentialException"),
        @FaultAction(className = InputInvalidValuesException_Exception.class, value = "http://ws.session.ejb/AppointmentEntityWebService/ifDateHasNotPassed/Fault/InputInvalidValuesException")
    })
    public boolean ifDateHasNotPassed(
        @WebParam(name = "email", targetNamespace = "")
        String email,
        @WebParam(name = "password", targetNamespace = "")
        String password,
        @WebParam(name = "date", targetNamespace = "")
        String date)
        throws InputInvalidValuesException_Exception, InvalidLoginCredentialException_Exception
    ;

}
