
package ws.client;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.6-1b01 
 * Generated source version: 2.2
 * 
 */
@WebService(name = "ServiceProviderWebService", targetNamespace = "http://ws.session.ejb/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface ServiceProviderWebService {


    /**
     * 
     * @param password
     * @param email
     * @return
     *     returns java.util.List<ws.client.ServiceProviderEntity>
     * @throws InvalidLoginCredentialException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "retrieveAllServiceProviderEntity", targetNamespace = "http://ws.session.ejb/", className = "ws.client.RetrieveAllServiceProviderEntity")
    @ResponseWrapper(localName = "retrieveAllServiceProviderEntityResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.RetrieveAllServiceProviderEntityResponse")
    @Action(input = "http://ws.session.ejb/ServiceProviderWebService/retrieveAllServiceProviderEntityRequest", output = "http://ws.session.ejb/ServiceProviderWebService/retrieveAllServiceProviderEntityResponse", fault = {
        @FaultAction(className = InvalidLoginCredentialException_Exception.class, value = "http://ws.session.ejb/ServiceProviderWebService/retrieveAllServiceProviderEntity/Fault/InvalidLoginCredentialException")
    })
    public List<ServiceProviderEntity> retrieveAllServiceProviderEntity(
        @WebParam(name = "email", targetNamespace = "")
        String email,
        @WebParam(name = "password", targetNamespace = "")
        String password)
        throws InvalidLoginCredentialException_Exception
    ;

    /**
     * 
     * @param password
     * @param serviceProviderEmail
     * @param email
     * @return
     *     returns ws.client.ServiceProviderEntity
     * @throws ServiceProviderNotFoundException_Exception
     * @throws InvalidLoginCredentialException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "retrieveServiceProviderEntityByEmail", targetNamespace = "http://ws.session.ejb/", className = "ws.client.RetrieveServiceProviderEntityByEmail")
    @ResponseWrapper(localName = "retrieveServiceProviderEntityByEmailResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.RetrieveServiceProviderEntityByEmailResponse")
    @Action(input = "http://ws.session.ejb/ServiceProviderWebService/retrieveServiceProviderEntityByEmailRequest", output = "http://ws.session.ejb/ServiceProviderWebService/retrieveServiceProviderEntityByEmailResponse", fault = {
        @FaultAction(className = InvalidLoginCredentialException_Exception.class, value = "http://ws.session.ejb/ServiceProviderWebService/retrieveServiceProviderEntityByEmail/Fault/InvalidLoginCredentialException"),
        @FaultAction(className = ServiceProviderNotFoundException_Exception.class, value = "http://ws.session.ejb/ServiceProviderWebService/retrieveServiceProviderEntityByEmail/Fault/ServiceProviderNotFoundException")
    })
    public ServiceProviderEntity retrieveServiceProviderEntityByEmail(
        @WebParam(name = "email", targetNamespace = "")
        String email,
        @WebParam(name = "password", targetNamespace = "")
        String password,
        @WebParam(name = "serviceProviderEmail", targetNamespace = "")
        String serviceProviderEmail)
        throws InvalidLoginCredentialException_Exception, ServiceProviderNotFoundException_Exception
    ;

    /**
     * 
     * @param password
     * @param serviceProviderId
     * @param email
     * @return
     *     returns ws.client.ServiceProviderEntity
     * @throws ServiceProviderNotFoundException_Exception
     * @throws ServiceProviderBlockedException_Exception
     * @throws InvalidLoginCredentialException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "retrieveServiceProviderEntityById", targetNamespace = "http://ws.session.ejb/", className = "ws.client.RetrieveServiceProviderEntityById")
    @ResponseWrapper(localName = "retrieveServiceProviderEntityByIdResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.RetrieveServiceProviderEntityByIdResponse")
    @Action(input = "http://ws.session.ejb/ServiceProviderWebService/retrieveServiceProviderEntityByIdRequest", output = "http://ws.session.ejb/ServiceProviderWebService/retrieveServiceProviderEntityByIdResponse", fault = {
        @FaultAction(className = InvalidLoginCredentialException_Exception.class, value = "http://ws.session.ejb/ServiceProviderWebService/retrieveServiceProviderEntityById/Fault/InvalidLoginCredentialException"),
        @FaultAction(className = ServiceProviderNotFoundException_Exception.class, value = "http://ws.session.ejb/ServiceProviderWebService/retrieveServiceProviderEntityById/Fault/ServiceProviderNotFoundException"),
        @FaultAction(className = ServiceProviderBlockedException_Exception.class, value = "http://ws.session.ejb/ServiceProviderWebService/retrieveServiceProviderEntityById/Fault/ServiceProviderBlockedException")
    })
    public ServiceProviderEntity retrieveServiceProviderEntityById(
        @WebParam(name = "email", targetNamespace = "")
        String email,
        @WebParam(name = "password", targetNamespace = "")
        String password,
        @WebParam(name = "serviceProviderId", targetNamespace = "")
        Long serviceProviderId)
        throws InvalidLoginCredentialException_Exception, ServiceProviderBlockedException_Exception, ServiceProviderNotFoundException_Exception
    ;

    /**
     * 
     * @param password
     * @param city
     * @param businessCategory
     * @param email
     * @return
     *     returns java.util.List<ws.client.ServiceProviderEntity>
     * @throws ServiceProviderNotFoundException_Exception
     * @throws InvalidLoginCredentialException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "retrieveServiceProviderEntityBySearch", targetNamespace = "http://ws.session.ejb/", className = "ws.client.RetrieveServiceProviderEntityBySearch")
    @ResponseWrapper(localName = "retrieveServiceProviderEntityBySearchResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.RetrieveServiceProviderEntityBySearchResponse")
    @Action(input = "http://ws.session.ejb/ServiceProviderWebService/retrieveServiceProviderEntityBySearchRequest", output = "http://ws.session.ejb/ServiceProviderWebService/retrieveServiceProviderEntityBySearchResponse", fault = {
        @FaultAction(className = InvalidLoginCredentialException_Exception.class, value = "http://ws.session.ejb/ServiceProviderWebService/retrieveServiceProviderEntityBySearch/Fault/InvalidLoginCredentialException"),
        @FaultAction(className = ServiceProviderNotFoundException_Exception.class, value = "http://ws.session.ejb/ServiceProviderWebService/retrieveServiceProviderEntityBySearch/Fault/ServiceProviderNotFoundException")
    })
    public List<ServiceProviderEntity> retrieveServiceProviderEntityBySearch(
        @WebParam(name = "email", targetNamespace = "")
        String email,
        @WebParam(name = "password", targetNamespace = "")
        String password,
        @WebParam(name = "businessCategory", targetNamespace = "")
        String businessCategory,
        @WebParam(name = "city", targetNamespace = "")
        String city)
        throws InvalidLoginCredentialException_Exception, ServiceProviderNotFoundException_Exception
    ;

    /**
     * 
     * @param password
     * @param name
     * @param email
     * @return
     *     returns ws.client.ServiceProviderEntity
     * @throws ServiceProviderNotFoundException_Exception
     * @throws InvalidLoginCredentialException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "retrieveServiceProviderEntityByName", targetNamespace = "http://ws.session.ejb/", className = "ws.client.RetrieveServiceProviderEntityByName")
    @ResponseWrapper(localName = "retrieveServiceProviderEntityByNameResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.RetrieveServiceProviderEntityByNameResponse")
    @Action(input = "http://ws.session.ejb/ServiceProviderWebService/retrieveServiceProviderEntityByNameRequest", output = "http://ws.session.ejb/ServiceProviderWebService/retrieveServiceProviderEntityByNameResponse", fault = {
        @FaultAction(className = InvalidLoginCredentialException_Exception.class, value = "http://ws.session.ejb/ServiceProviderWebService/retrieveServiceProviderEntityByName/Fault/InvalidLoginCredentialException"),
        @FaultAction(className = ServiceProviderNotFoundException_Exception.class, value = "http://ws.session.ejb/ServiceProviderWebService/retrieveServiceProviderEntityByName/Fault/ServiceProviderNotFoundException")
    })
    public ServiceProviderEntity retrieveServiceProviderEntityByName(
        @WebParam(name = "email", targetNamespace = "")
        String email,
        @WebParam(name = "password", targetNamespace = "")
        String password,
        @WebParam(name = "name", targetNamespace = "")
        String name)
        throws InvalidLoginCredentialException_Exception, ServiceProviderNotFoundException_Exception
    ;

    /**
     * 
     * @param password
     * @param serviceProviderId
     * @param rating
     * @param email
     * @throws ServiceProviderNotFoundException_Exception
     * @throws ServiceProviderBlockedException_Exception
     * @throws InvalidLoginCredentialException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "updateRating", targetNamespace = "http://ws.session.ejb/", className = "ws.client.UpdateRating")
    @ResponseWrapper(localName = "updateRatingResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.UpdateRatingResponse")
    @Action(input = "http://ws.session.ejb/ServiceProviderWebService/updateRatingRequest", output = "http://ws.session.ejb/ServiceProviderWebService/updateRatingResponse", fault = {
        @FaultAction(className = InvalidLoginCredentialException_Exception.class, value = "http://ws.session.ejb/ServiceProviderWebService/updateRating/Fault/InvalidLoginCredentialException"),
        @FaultAction(className = ServiceProviderNotFoundException_Exception.class, value = "http://ws.session.ejb/ServiceProviderWebService/updateRating/Fault/ServiceProviderNotFoundException"),
        @FaultAction(className = ServiceProviderBlockedException_Exception.class, value = "http://ws.session.ejb/ServiceProviderWebService/updateRating/Fault/ServiceProviderBlockedException")
    })
    public void updateRating(
        @WebParam(name = "email", targetNamespace = "")
        String email,
        @WebParam(name = "password", targetNamespace = "")
        String password,
        @WebParam(name = "rating", targetNamespace = "")
        Double rating,
        @WebParam(name = "serviceProviderId", targetNamespace = "")
        Long serviceProviderId)
        throws InvalidLoginCredentialException_Exception, ServiceProviderBlockedException_Exception, ServiceProviderNotFoundException_Exception
    ;

}
